# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAddmed():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.wait = WebDriverWait(self.driver, 10)
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_addmed(self):
    try:
      # Navigate to homepage and login
      self.driver.get("http://localhost/new/")
      self.driver.set_window_size(1327, 736)
      
      # Click login link and wait for login form
      login_link = self.wait.until(EC.presence_of_element_located((By.LINK_TEXT, "Login")))
      login_link.click()
      
      # Wait for and fill login form
      email_field = self.wait.until(EC.presence_of_element_located((By.ID, "email")))
      email_field.click()
      email_field.send_keys("balan@gmail.com")
      
      password_field = self.driver.find_element(By.ID, "password")
      password_field.send_keys("Milan@07")
      password_field.send_keys(Keys.ENTER)
      
      # Wait for login to complete and check for error messages
      try:
        # Wait for either dashboard or error message
        error_message = self.wait.until(
          EC.presence_of_element_located((By.CLASS_NAME, "alert-danger"))
        )
        if error_message:
          raise Exception(f"Login failed: {error_message.text}")
      except:
        # No error message found, continue with test
        pass
      
      # Wait for dashboard to load and find Inventory link
      try:
        # First try to find the Inventory link directly
        inventory_link = self.wait.until(
          EC.presence_of_element_located((By.XPATH, "//a[contains(., 'Inventory') or contains(., 'inventory')]"))
        )
      except:
        # If that fails, try to find any navigation link to confirm we're on the dashboard
        try:
          self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, "nav-link")))
          # Take a screenshot to see what links are available
          self.driver.save_screenshot("dashboard_links.png")
          raise Exception("Could not find Inventory link, but found other navigation links. Check dashboard_links.png")
        except:
          # If we can't find any navigation links, the login probably failed
          self.driver.save_screenshot("login_failure.png")
          raise Exception("Login appears to have failed - no navigation links found")
      
      inventory_link.click()
      
      # Wait for the add medicine form to load
      self.wait.until(EC.presence_of_element_located((By.NAME, "name")))
      
      # Fill in the medicine details
      self.driver.find_element(By.NAME, "name").click()
      self.driver.find_element(By.NAME, "name").send_keys("Cetirizine 10mg")
      self.driver.find_element(By.NAME, "company").send_keys("Zenith Pharmaceuticals")
      self.driver.find_element(By.NAME, "batch_number").send_keys("CTZ10Z567")
      self.driver.find_element(By.NAME, "mfg_date").click()
      self.driver.find_element(By.NAME, "mfg_date").send_keys("2025-04-03")
      self.driver.find_element(By.NAME, "expiry_date").click()
      self.driver.find_element(By.NAME, "expiry_date").send_keys("2027-06-24")
      self.driver.find_element(By.NAME, "stock_quantity").click()
      self.driver.find_element(By.NAME, "stock_quantity").send_keys("140")
      self.driver.find_element(By.NAME, "price_per_unit").click()
      self.driver.find_element(By.NAME, "price_per_unit").send_keys("12")
      self.driver.find_element(By.NAME, "add_medicine").click()
      
    except Exception as e:
      # Take a screenshot for debugging
      self.driver.save_screenshot("test_addmed_error.png")
      raise Exception(f"Test failed: {str(e)}")
  
